import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.ArrayList;

public class KingsmenCodingChallenge {
  String line = null;
   int lnum =0;
   boolean flag = false;
  public static void main(String args[]) throws FileNotFoundException{
    
    KingsmenCodingChallenge obj = new KingsmenCodingChallenge();
    obj.parseData(args);
    
  }
  
  public String getClassNames(){
    
    String classname = this.getClass().getName();
    return classname;
  }

  private void parseData(String[] args) throws FileNotFoundException {
     
     String[] array = null;
     ArrayList<String> alist = new ArrayList<>();
        if (0 < args.length) {
          File file = new File(args[0]);
          LineNumberReader file1 = new LineNumberReader(new FileReader(file));

              try {
          while((line = file1.readLine()) != null)
          {
            
            if(line.contains("if") && !line.contains("{")){
              int temp = file1.getLineNumber();
              if(!file1.readLine().contains("{"))
                  System.out.println("Single line if loop. Line number: "+temp);

            }
            else if(line.contains("else") && (!line.contains("{"))){
              int temp = file1.getLineNumber();
              if(!file1.readLine().contains("{"))
                  System.out.println("Single line else loop. Line number: "+temp);
            }
            else if(line.contains(");") && !line.contains(getClassNames()) && !line.contains("write")){
              
                    StringBuffer stringbuffer = new StringBuffer("");  

              if(line.contains(".")){
                stringbuffer.append(line);
                array = stringbuffer.toString().split("[\\.\\;]");
                alist.add(array[array.length-1]);
                
              }
              else{
                stringbuffer.append(line);
                array = stringbuffer.toString().split("[\n\\;]");
                alist.add(array[0]);
              }
            }
          }
        } catch (IOException e) {
          e.printStackTrace();
        }

              checkFunctionDeclarations(alist, file);
              
              for(String a:alist){
          System.out.println(a);
        }
        }
        else
        {
          System.out.println("No Argument Provided");
        }
  }

  private void checkFunctionDeclarations(ArrayList<String> alist, File file) throws FileNotFoundException {
    if(alist.size()>0){
          for(String a:alist){
            int count = 0;
            String[] tempFunctionStore = null;
            if(a.contains(",")){
              tempFunctionStore = a.split("\\,");
                for(String d:tempFunctionStore){
                  count++;
                }
                  
                  }
            else {
              tempFunctionStore = a.split("\\(");
                for(String d:tempFunctionStore){
                  count++;
                }
            }
//          IMPLEMENT INBUILT FUNCS LATER!!!!!!!!

            LineNumberReader file2 = new LineNumberReader(new FileReader(file));
            try {
          while((line = file2.readLine()) != null)
          {
            
                  String t[] = a.split("[\\(\\s]");              
            if(((line.contains(t[0]) && (line.contains("function"))) && ((line.contains("{")) || file2.readLine().contains("{") ))){
              
                      StringBuffer stringbuffer = new StringBuffer("");  
                      
                      stringbuffer.append(line);
                      //Could use one more split using commas if necessary
              String convertToString = stringbuffer.toString();

              if(convertToString.contains(",")){
                String storeFunctionValues[] = convertToString.split("\\,");
                
                
                int length = storeFunctionValues.length;
                if(length == count)
                  flag=true;
              }
              else {
                String storeFunctionValues[] = convertToString.split("\\(");
                
                int length = storeFunctionValues.length;
                if(length == count)
                  flag=true;
              }
            
            }
              
          }
              }catch (IOException e) {
            e.printStackTrace();
        }
            if(flag==false){
              System.out.println("Function "+a+"is never declared.");
          
            }
            flag=false;
          }             
        }   
  }
}

